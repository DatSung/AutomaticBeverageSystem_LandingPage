---
import Layout from "@layouts/Layout.astro";
import { API_URL } from "@constants/apiUrl";
import type { KioskModel } from "src/interfaces/kioskModel";

let models: KioskModel[] = [];

try {
  const res = await fetch(API_URL.kioskModels.gets);
  const json = await res.json();
  const allItems = json.response.items ?? [];

  // Lấy tất cả model và sắp xếp theo thứ tự
  models = allItems.sort(
    (a: KioskModel, b: KioskModel) => a.sortOrder - b.sortOrder
  );
} catch (err) {
  console.error("Error fetching kiosk models:", err);
}
---

<Layout>
  <div
    class="min-h-screen bg-gradient-to-br from-cyan-50 via-blue-50 to-slate-50"
  >
    <!-- Hero Section -->
    <section class="relative overflow-hidden">
      <div
        class="absolute inset-0 bg-gradient-to-r from-cyan-600/10 via-blue-600/5 to-cyan-600/10"
      >
      </div>
      <div class="relative max-w-7xl mx-auto px-6 py-20 text-center">
        <div class="space-y-6">
          <div
            class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-cyan-100 to-blue-100 rounded-full border border-cyan-200"
          >
            <svg
              class="w-5 h-5 text-cyan-600 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              ></path>
            </svg>
            <span class="text-cyan-700 font-medium text-sm"
              >Sản phẩm của chúng tôi</span
            >
          </div>

          <h1
            class="text-4xl md:text-6xl font-bold bg-gradient-to-r from-cyan-600 via-blue-600 to-cyan-700 bg-clip-text text-transparent leading-tight"
          >
            Máy Bán Hàng Tự Động
          </h1>

          <p
            class="text-lg md:text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed"
          >
            Khám phá các dòng máy bán hàng tự động thông minh,
            <span
              class="bg-gradient-to-r from-cyan-600 to-blue-600 bg-clip-text text-transparent font-semibold"
            >
              phù hợp cho mọi không gian làm việc hiện đại
            </span>
          </p>
        </div>
      </div>
    </section>

    <!-- Search & Filter Section -->
    <section class="max-w-7xl mx-auto px-6 py-8">
      <div
        class="bg-white/80 backdrop-blur-sm rounded-3xl border border-cyan-100 shadow-lg p-6"
      >
        <div
          class="flex flex-col lg:flex-row gap-4 items-center justify-between"
        >
          <!-- Search Bar -->
          <div class="relative flex-1 max-w-md">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <svg
                class="h-5 w-5 text-slate-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              id="searchInput"
              placeholder="Tìm kiếm máy..."
              class="block w-full pl-10 pr-3 py-3 border border-cyan-200 rounded-xl leading-5 bg-white/80 placeholder-slate-400 focus:outline-none focus:placeholder-slate-300 focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300"
            />
          </div>

          <!-- Results Info -->
          <div class="flex items-center space-x-4">
            <div class="text-slate-600">
              Hiển thị <span
                id="currentResults"
                class="font-semibold text-cyan-600">0</span
              >
              trên tổng <span
                id="totalResults"
                class="font-semibold text-blue-600">0</span
              > sản phẩm
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Models Grid -->
    <section class="max-w-7xl mx-auto px-6 pb-16">
      <div
        id="modelsGrid"
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"
      >
        <!-- Models will be rendered here by JavaScript -->
      </div>

      <!-- No Results Message -->
      <div id="noResults" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
          <svg
            class="w-16 h-16 text-slate-300 mx-auto mb-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33.07-.28.22-.546.42-.77L12 6l5.66 6.9c.2.224.35.49.42.77z"
            ></path>
          </svg>
          <h3 class="text-xl font-semibold text-slate-600 mb-2">
            Không tìm thấy sản phẩm
          </h3>
          <p class="text-slate-500">
            Thử tìm kiếm với từ khóa khác hoặc xóa bộ lọc.
          </p>
        </div>
      </div>

      <!-- Pagination -->
      <div
        id="pagination"
        class="flex justify-center items-center space-x-2 mt-12"
      >
        <!-- Pagination will be rendered here by JavaScript -->
      </div>
    </section>
  </div>

  <!-- Pass data to JavaScript -->
  <script define:vars={{ models }}>
    class ModelsManager {
      constructor() {
        this.allModels = models || [];
        this.filteredModels = [...this.allModels];
        this.currentPage = 1;
        this.itemsPerPage = 8;
        this.searchTerm = "";

        this.init();
      }

      init() {
        this.setupEventListeners();
        this.renderModels();
        this.updateResultsInfo();
        this.renderPagination();
      }

      setupEventListeners() {
        const searchInput = document.getElementById("searchInput");
        if (searchInput) {
          searchInput.addEventListener("input", (e) => {
            this.searchTerm = e.target.value.toLowerCase();
            this.filterModels();
            this.currentPage = 1;
            this.renderModels();
            this.updateResultsInfo();
            this.renderPagination();
          });
        }
      }

      filterModels() {
        this.filteredModels = this.allModels.filter((model) => {
          const nameMatch = model.kioskModelName
            .toLowerCase()
            .includes(this.searchTerm);
          const descMatch = model.kioskModelDescription
            .toLowerCase()
            .includes(this.searchTerm);
          return nameMatch || descMatch;
        });
      }

      getCurrentPageModels() {
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        return this.filteredModels.slice(startIndex, endIndex);
      }

      renderModels() {
        const grid = document.getElementById("modelsGrid");
        const noResults = document.getElementById("noResults");
        const currentPageModels = this.getCurrentPageModels();

        if (currentPageModels.length === 0) {
          grid.innerHTML = "";
          noResults.classList.remove("hidden");
          return;
        }

        noResults.classList.add("hidden");

        grid.innerHTML = currentPageModels
          .map(
            (model) => `
          <div class="group bg-white/80 backdrop-blur-sm rounded-3xl border border-cyan-100 shadow-lg hover:shadow-xl overflow-hidden transition-all duration-300 hover:-translate-y-2">
            <!-- Image Container -->
            <div class="relative h-56 overflow-hidden">
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10"></div>
              <img
                src="${model.heroImageUrl}"
                alt="${model.kioskModelName}"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                loading="lazy"
              />
              <!-- Floating Badge -->
              <div class="absolute top-4 left-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-lg">
                Nổi bật
              </div>
            </div>

            <!-- Content -->
            <div class="p-6 space-y-4">
              <div class="space-y-2">
                <h3 class="text-xl font-bold text-slate-800 group-hover:text-cyan-600 transition-colors duration-300">
                  ${model.kioskModelName}
                </h3>
                <p class="text-sm text-slate-600 leading-relaxed line-clamp-3">
                  ${model.kioskModelDescription}
                </p>
              </div>

              <!-- Specs Preview -->
              <div class="flex items-center justify-between text-xs text-slate-500">
                <span class="flex items-center">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                  Tự động
                </span>
                <span class="flex items-center">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  24/7
                </span>
              </div>

              <!-- CTA Button -->
              <a
                href="/models/${model.kioskModelId}"
                class="group/btn relative w-full inline-flex items-center justify-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-500 text-white font-semibold rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-0.5 overflow-hidden"
              >
                <span class="relative z-10 flex items-center">
                  Xem chi tiết
                  <svg class="w-4 h-4 ml-2 group-hover/btn:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </span>
                <div class="absolute inset-0 bg-gradient-to-r from-cyan-600 to-blue-600 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300"></div>
              </a>
            </div>
          </div>
        `
          )
          .join("");
      }

      updateResultsInfo() {
        const currentResults = document.getElementById("currentResults");
        const totalResults = document.getElementById("totalResults");

        if (currentResults) {
          currentResults.textContent = this.getCurrentPageModels().length;
        }
        if (totalResults) {
          totalResults.textContent = this.filteredModels.length;
        }
      }

      renderPagination() {
        const pagination = document.getElementById("pagination");
        const totalPages = Math.ceil(
          this.filteredModels.length / this.itemsPerPage
        );

        if (totalPages <= 1) {
          pagination.innerHTML = "";
          return;
        }

        let paginationHTML = "";

        // Previous button
        if (this.currentPage > 1) {
          paginationHTML += `
            <button class="pagination-btn px-4 py-2 bg-white/80 backdrop-blur-sm border border-cyan-200 rounded-xl hover:bg-cyan-50 transition-colors duration-300" data-page="${this.currentPage - 1}">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
          `;
        }

        // Page numbers
        const startPage = Math.max(1, this.currentPage - 2);
        const endPage = Math.min(totalPages, startPage + 4);

        for (let i = startPage; i <= endPage; i++) {
          const isActive = i === this.currentPage;
          paginationHTML += `
            <button class="pagination-btn px-4 py-2 rounded-xl transition-all duration-300 ${
              isActive
                ? "bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-lg"
                : "bg-white/80 backdrop-blur-sm border border-cyan-200 hover:bg-cyan-50"
            }" data-page="${i}">
              ${i}
            </button>
          `;
        }

        // Next button
        if (this.currentPage < totalPages) {
          paginationHTML += `
            <button class="pagination-btn px-4 py-2 bg-white/80 backdrop-blur-sm border border-cyan-200 rounded-xl hover:bg-cyan-50 transition-colors duration-300" data-page="${this.currentPage + 1}">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          `;
        }

        pagination.innerHTML = paginationHTML;

        // Add event listeners to pagination buttons
        document.querySelectorAll(".pagination-btn").forEach((btn) => {
          btn.addEventListener("click", (e) => {
            const page = parseInt(e.currentTarget.dataset.page);
            this.currentPage = page;
            this.renderModels();
            this.updateResultsInfo();
            this.renderPagination();

            // Scroll to top of grid
            document.getElementById("modelsGrid").scrollIntoView({
              behavior: "smooth",
              block: "start",
            });
          });
        });
      }

      getTotalPages() {
        return Math.ceil(this.filteredModels.length / this.itemsPerPage);
      }
    }

    // Initialize when DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
      new ModelsManager();
    });
  </script>

  <style>
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</Layout>
